* Example Queries
:PROPERTIES:
:header-args:http: :host http://localhost:3030 :user admin:quinnisgreat
:header-args:sparqlx: :url http://sparql.org/sparql :format text/csv
:header-args:sparql: :url http://localhost:3030/experts_private/sparql :format text/csv
:END:


#+name: prefixes
#+BEGIN_SRC sparql :no-tangle
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX experts: <http://experts.ucdavis.edu/>
PREFIX experts_pub: <http://experts.ucdavis.edu/pubs/>
PREFIX experts_iam: <http://experts.ucdavis.edu/iam/>
PREFIX iam: <http://experts.ucdavis.edu/iam/schema#>
#+END_SRC


These simple example need might include update queries?
#+name: update_example
#+BEGIN_SRC sparql
<<prefixes>>
#insert  {graph experts_pub: { experts:quinn experts:is experts:great. }} WHERE {}
#delete { graph ?g {?s ?p ?o} } WHERE { graph ?g {?s ?p ?o}}
#select ?g (count(*) as ?cnt) WHERE { graph ?g {?s ?p ?o.}} group by ?g
#select ?o (count(*) as ?cnt) WHERE { graph ?g {?s a ?o. filter(isiri(?s))}} group by ?o

#+END_SRC



** Example Testing Script


#+BEGIN_SRC bash

# Login to the CDL database (one time)
# Logs in using CDL_AUTH and UCDID_AUTH
dc exec harvest harvest login

userIds="benthem chmkim jcgib jkmason mleite ramram rhcastro rkukreja sbsen sjmccorm spgentry sshong ytakamur"
for id in $userIds; do
  dc exec harvest harvest -v run --search=userId=$id --init --remove
done

# BAE Senate
emails="mahamed@ucdavis.edu gbornhorst@ucdavis.edu adaccache@ucdavis.edu jdemourabell@ucdavis.edu jmearles@ucdavis.edu jzfan@ucdavis.edu fathallah@ucdavis.edu megrismer@ucdavis.edu ylhsieh@ucdavis.edu bmjenkins@ucdavis.edu tjeoh@ucdavis.edu ikisekka@ucdavis.edu amoghimi@ucdavis.edu jsmullin@ucdavis.edu nnitin@ucdavis.edu npan@ucdavis.edu dcs@ucdavis.edu gysun@ucdavis.edu svougioukas@ucdavis.edu rhzhang@ucdavis.edu"
for id in $emails; do
  dc exec harvest harvest -v run --search=email=$id --init --remove
done

# BAE Federation
emails="irdonisgon@ucdavis.edu jdfernandezbayo@ucdavis.edu dafrank@ucdavis.edu thung@ucdavis.edu fkhorsandi@ucdavis.edu kkorn@ucdavis.edu palarbi@ucdavis.edu zlpan@ucdavis.edu apourreza@ucdavis.edu hbscher@ucdavis.edu jsvander@ucdavis.edu"
for id in $emails; do
  dc exec harvest harvest -v run --search=email=$id --init --remove
done

#+END_SRC


** Manual Updates to the rc database

dc pull
dc down
update .env for testing
dc up -d

Get Users

users=$(http --print=b --follow http://gold.experts.library.ucdavis.edu:8081/experts/query query=='PREFIX ucdrp: <http://experts.ucdavis.edu/schema#> select ?userId WHERE { [] a ucdrp:person; ucdrp:casId ?userId} order by ?userId' Accept:text/csv | tail -n+2 | tr -s '\n\r' ' ')

dc exec harvest db new

http -f --auth=admin:a7a0e8a1-728d-4f7c-a8ba-57d87b263ca0 http://localhost:8081/harvest.voZs/update update='delete { graph ?g {?s ?p ?o } } WHERE { values ?g { <http://experts.ucdavis.edu/oap/> <http://experts.ucdavis.edu/iam/> } graph ?g { ?s ?p ?o } }'

dc exec harvest harvest db rm harvest.voZs


dc exec harvest harvest -v login

 for id in $users; do dc exec harvest harvest -v run --search=userId=$id --init --remove; done


** Comparisons to the Elements Harvester command

The harvest command will also run the XSLT processing from the sympletic
harvester.  This might be used to compare previous VIVO pulls.

#+BEGIN_SRC bash

export ELEMENTS_BASE=/usr/local/vivo/harvester/data
mkdir -p $ELEMENTS_BASE/raw-records

# The ids (for now) require that you've run the CDL step above.
ids=$(aeq --endpoint=${HARVEST_ENDPOINT}/sparql query --format=json <<<"select ?id where { graph harvest_oap: {?s oap:category 'user' . bind(replace(str(?s),str(harvest_oap:),'') as ?id) filter(isiri(?s))}} order by ?id" | jq -r .results.bindings[].id.value | tr [:space:] ' ')
export ELEMENTS_IDS=${ids// /,}

elements feed groups users user-relationships publications relationships
# There is a problem currently w/ groups, you need to
cp $ELEMENTS_BASE/feed/groups.xml $ELEMENTS_BASE/feed/groups.000

elements feed.split groups users publications relationships

# Now create data w/ xslt
harvest xslt --select=oapolicy.ttl

# And load it into db
harvest load --graph=http://experts.ucdavis.edu/oap/ oapolicy.ttl

# Save the graphs
for i in experts.ucdavis.edu%2Foap experts.ucdavis.edu%2Fiam
graph="http://"$(echo $i | sed -e 's|%2F|/|g')"/"
echo "aeq --endpoint=${HARVEST_ENDPOINT}/sparql query --format=ttl \<\<\<\"CONSTRUCT {?s ?p ?o } WHERE { graph <${graph}> { ?s ?p ?o.}}\" \> $i/graph.ttl"
end

#+END_SRC

#+RESULTS:
