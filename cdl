#! /usr/bin/env bash

: <<=cut
=pod

=head1  NAME

elements - Harvest an Elements feed.

=head1 SYNOPSIS

elements [--api=<elements_endpoint>] [-S|--session=<httpie session>] \
         [-c|--cache=<dir>] [-t|--tdb=<tdb-dir>] [-d|--data=<data load endpoint] \
         [-p|--print] [-h|--help]\
  <command> [<args>]

  where <command> is one of harvest

elements is a script the simplifies the retrieval of an elements feed API.
L</"COMMANDS"> is summary of the commands that are available.

=head1 GLOBAL OPTIONS

=over 4

=item B<--api=I<elements_endpoint>>

This is the http address for the elements endpoint.

=item B<-S|--session|--http_session=I<http_session>>

Set the HTTPIE session variable. It is equivalent to the
L<httpie|https://httpie.org/> session variable, and are shared in that command
configuration. Sessions primarily keep the basic authentication parameters
saved. By default the B<elements> session is used.

=item B<-c|--cache = directory>

Specify the cache directory for downloads and intermediate files, default
C<cache=/var/lib/harvest/cdl>.

=item B<-t|--tdb = directory>

Specify a local tdb location to load the cdl data, default C<tdb=/var/lib/harvest/cdl/tdb>.

=item B<-d|--data = fuseki data endpoint>

Specify a remote sparql data endpoint fuseki to load the cdl data.  No
default. In additiona to command-line auth, this will also use the
envirionmental parameters C<FUSEKI_USER> and C<FUSEKI_PASSWORD> for authentication, equivalent to C<--data-auth=FUSEKI_USER:FUSEKI_PASSWORD>.

=item B<-v|--verbose>

Log some of the commands that your are going to run.

=item B<-h|--help>

Shows the manpage for the program. The help pages are embedded in the script and
require the functions, C<pod2usage> and C<pod2text> to work properly.

=back

=cut

function _parse_yaml() {
  local prefix=$2
  local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
  sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
      -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
    awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("G[%s%s]=\"%s\"\n", vn, $2, $3);
      }
   }'
}

function init() {
    local opts=`$GETOPT -o A:bnhS:vt:d:c: --long verbose,base:,api:,data:,cache:,tdb:,http_session:,session:,dry-run,help -n 'elements' -- "$@"`
    if [ $? != 0 ] ; then echo "Bad Command Options." >&2 ; exit 1 ; fi

    eval set -- "$opts"

    local i
    declare -A CMD;
    while true; do
	    case $1 in
        -A | --api) CMD[api]=$2; shift 2;;
	      --session | --http_session) CMD[http_session]=$2;  shift 2;;
        -t | --tdb ) CMD[tdb]=$2; shift 2;;
        -d | --data ) CMD[data]=$2; shift 2;;
        -c | --cache ) CMD[cache]=$2; shift 2;;
	      -v | --verbose) CMD[verbose]=1;  shift;;
	      -n | --dry-run) CMD[noop]=1; shift ;;
	      --print | --http_print) CMD[http_print]=$2; shift 2;;
        -h | --help ) exec pod2text $0;;
	      -- ) shift; break;;
	      *) shift; break;
      esac
    done

    # system variables (ELEMENTS_FOO_BAR) over config file
    for i in "${!G[@]}"; do
      eval v=\$CDL_${i^^}
      [[ -n $v ]] && G[$i]=$v
    done

    # COMMAND LINE FOR THESE OVER YAML file
    for i in ${!CMD[@]}; do
      [[ -n ${CMD[$i]} ]] && G[$i]=${CMD[$i]};
    done

    [[ -d ${G[cache]} ]] || err 1 "cache ${G[cache]} doesn't exist or isn't a directory"

}


: <<='cut'

=pod

=head1 COMMANDS

Next there are a set of commands that communicate with the CDL service. Note,
that ezid uses L<httpie|https://httpie.org/> for its http communcation. This
allows users to combine ezid with other httpie requests if required. Login
infomation is stored using the standard C<httpie> methodology, see L</"GLOBAL OPTIONS"> for httpid options.

C<elements [options] harvest --full> Harvests a number of feeds from the
Elements database and stores each record in a separate file.  This is to match how
the Sympletic Harvester works

=cut

function main.cmd () {
    cmd=$1
    shift;
    case $cmd in
	    get | login | groups | users ) # API requests
	      $cmd "$@";
	      ;;
	    group.sub | group.membership ) # group commands
	      $cmd "$@";
	      ;;
	    load_jsonld | xml2jsonld ) # utility requests
	      $cmd "$@";
	      ;;
      declare ) # informational requests
        declare -p G;
        ;;
	    *)
	      exec pod2usage $0
	  ;;
    esac
}


function log() {
  [[ -n ${G[verbose]} ]] && (>&2 echo LOG: $@)
}

function err() {
  local n=1;
  if [[ $1 = '--quiet' ]] ; then
    n=$2;
  else
    n=$1
    shift
    (>&2 echo err: $@)
  fi
  exit $n;
}

:<<=cut

=head2 LOGIN

  elements login --auth=USER[:PASS]

B<elements login> is a simple wrapper around the B<httpie --auth=USER:PASS> command.
This allows users to setup their basic authorization, which is then stored in
the standard httpie session paratmeters. It is possible to maintain multiple users,
via the elements I<--session> parameter to maintain different users, eg.

  elements --session=ucd --auth=ucd

After which the session C<ucd>, will be set as a new httpie session, with
the saved authorization.

=head3 LOGIN OPTIONS

=over 4

=item B<-a|--auth=USER[:PASS]>

You specify the basic authentication for the ezid.cdlib.org server. If you only
specify the USER, then you are prompted for the password.

=back

=cut

function login() {
    local opts=`$GETOPT -o a --long auth: -n 'ezid login' -- "$@"`
    if [ $? != 0 ] ; then echo "Bad Command Options." >&2 ; exit 1 ; fi

    eval set -- "$opts"

    local auth=

    while true; do
	    case $1 in
        -a | --auth ) auth=$2; shift 2;;
	      -- ) shift; break;;
	      *) shift; break;
      esac
    done
    local http="${G[util_http]} --check-status --session=${G[http_session]} --print=hH"
    $http --auth=${auth} ${G[api]}/groups
}

:<<=cut

=head2 xml2jsonld

 cdl <global-elements> xml2jsonld --type=[user|user-relationship|relationship|publication|group]

B<cdl xml2jsonld> converts the CDL xml data to jsonld.

=head3 xml2jsonld OPTIONS

=over 4

=item B<--type=[user|user-relationship|relationship|publication|group]>

You pass the type of xml file, which selects the context, and the path to use
for the query.  Default is user

=cut

function xml2jsonld() {
  local opts;
  if ! opts=$($GETOPT -o t: --long type: -n 'cdl xml2jsonld' -- "$@"); then
    echo "Bad Command Options." >&2 ; exit 1 ;
  fi
  eval set -- "$opts"

  local type='groups'
  while true; do
	  case $1 in
      -t | --type ) type=$2; shift 2;;
	    -- ) shift; break;;
	    *) shift; break;
    esac
  done

  local context;
  local path;

  G[jsonld_context_map_id]='
{"@context":{
    "@base":"http://experts.ucdavis.edu/oap/",
    "@vocab":"http://experts.ucdavis.edu/oap/vocab#",
    "experts_oap":"http://experts.ucdavis.edu/oap/",
    "oap":"http://experts.ucdavis.edu/oap/vocab#",
    "api":"http://experts.ucdavis.edu/oap/vocab#",
    "id":{"@type":"@id","@id":"@id"},
    "field-name":"api:field-name",
    "field-number":"api:field-number",
    "$t":"api:field-value",
}}';

  G[jsonld_context_no_map_id]='
{"@context":{
  "@base":"http://experts.ucdavis.edu/oap/",
  "@vocab":"http://experts.ucdavis.edu/oap/vocab#",
  "experts_oap":"http://experts.ucdavis.edu/oap/",
  "oap":"http://experts.ucdavis.edu/oap/vocab#",
  "api":"http://experts.ucdavis.edu/oap/vocab#",
  "rdf":"http://www.w3.org/1999/02/22-rdf-syntax-ns#",
  "field-name":"api:field-name",
  "field-number":"api:field-number",
  "$t":"api:field-value",
  "api:person": { "@container": "@list" },
  "api:first-name": { "@container": "@list"},
  "categoryxx":{"@type":"@id","@id":"rdf:type"},
  "typexx":{"@type":"@id","@id":"rdf:type"}
}}';

  G[jsonld_user_path]='.feed.entry["api:object"]|(with_entries(if .key=="id" then .key="@id" else . end))';
  G[jsonld_user_context]=${G[jsonld_context_no_map_id]}

  G[jsonld_groups_path]='.feed.entry[]["api:user-group"]|(with_entries(if .key=="id" then .key="@id" else . end))';
  G[jsonld_groups_context]=${G[jsonld_context_map_id]}

  G[jsonld_user-relationship_path]='.feed.entry[]["api:relationship"]|(with_entries(if .key=="id" then .key="@id" else . end))';
  G[jsonld_user-relationship_context]=${G[jsonld_context_no_map_id]}

  G[jsonld_relationship_path]='.feed.entry[]["api:relationship"]|(with_entries(if .key=="id" then .key="@id" else . end))';
  G[jsonld_relationship_context]=${G[jsonld_context_no_map_id]}

  G[jsonld_publication_path]='.feed.entry[]["api:object"]|(with_entries(if .key=="id" then .key="@id" else . end))';
  G[jsonld_publication_context]=${G[jsonld_context_no_map_id]}

  while [[ -n "$1" ]]; do
    log "${G[util_xml2json]} < "$1" | jq '${G[jsonld_${type}_context]} + {\"@graph\":[${G[jsonld_${type}_path]}]}' > ${1//.xml/.jsonld}"
    ${G[util_xml2json]} < "$1" | jq "${G[jsonld_${type}_context]}"' + {"@graph":['"${G[jsonld_${type}_path]}"']}' > ${1//.xml/.jsonld}
    shift
  done
}


:<<=cut

=head2 groups

  cdl <global-elements> groups

B<cdl groups> uses the ATOM feed api to retreive the CDL groups from the
elements database.

=cut

function load_jsonld () {
  local file;
  if [[ -n ${G[data]} ]]; then
    local auth=admin:${FUSEKI_PASSWORD}
    local load=${G[data]}
    for file in "$@"; do
      riot --formatted=ttl $file > $file.ttl
      log "curl --location --request POST --user ${auth} -H \"Content-Type:multipart/form-data\" -F \"file=@${file}\" \"${load}?graph=${G[graph]}\""
      curl --location --request POST --user ${auth} -H "Content-Type:multipart/form-data" -F "file=@${file}" "${load}?graph=${G[graph]}"
    done
  fi
  # No can load both
  if [[ -n ${G[tdb]} ]]; then
    for file in "$@"; do
      riot --formatted=ttl $file > $file.ttl
      log "tdb2.tdbloader --loc=${G[tdb]} --graph=${G[graph]} $file.ttl"
      tdb2.tdbloader --loc=${G[tdb]} --graph=${G[graph]} $file.ttl
    done
  fi
}

function groups() {
  local http="${G[util_http]} --check-status --session-read-only=${G[http_session]} --print=b "

  log "${http} ${G[api]}/groups > ${G[cache]}/groups.xml"
  ${http} ${G[api]}/groups > ${G[cache]}/groups.xml
  xml2jsonld --type=groups ${G[cache]}/groups.xml
  load_jsonld ${G[cache]}/groups.jsonld
}

:<<=cut

=head2 users

  elements <global-elements> users [--groups=<group_ids,>] username username ....

B<elements feed> uses the ATOM feed api to retreive all categories from the
elements database. The function saves each chunk of the category and follows the
c<next> parameter until completed.  The files are saved to the C<feed> directory.

possible categories are c<groups>,c<users>,c<publications>,c<user-relationships>

=head3 FEED OPTIONS

=over 4

=item B<--groups=<group_ids>>

Specify a set of groups to download.

=back

=cut


function users () {
  local opts=`$GETOPT -o g:u:pn --long tdb:,per-page:,groups:,detail:,usernames:,ids:,user-groups,pubs,no-pubs -n 'elements feed' -- "$@"`
  if [ $? != 0 ] ; then echo "Bad Command Options." >&2 ; exit 1 ; fi

  log "$opts"
  eval set -- "$opts"

  local run='--run'
  declare -A CMD;
  while true; do
	  case $1 in
      -g | --groups ) CMD[user_groups]=$2; shift 2;;
      -p | --pubs ) CMD[user_pubs]=1; shift ;;
      -n | --no-pubs ) CMD[user_pubs]=''; shift ;;
	    -- ) shift; break;;
	    *) shift; break;
    esac
  done

  # COMMAND LINE FOR THESE OVER YAML file
  for i in ${!CMD[@]}; do
    [[ -n ${CMD[$i]} ]] && G[$i]=${CMD[$i]};
  done

  local http="${G[util_http]} --check-status --session-read-only=${G[http_session]} --print=b "
  local g n N uf;
  [[ -d ${G[cache]} ]] || mkdir ${G[cache]}

  local selT="${G[util_xmlstarlet]} sel -T -N a=http://www.w3.org/2005/Atom"

  # Do we have any user_groups?
  if [[ -n ${G[user_groups]} ]] ; then
    for g in ${G[user_groups]//,/ }; do
      next="${G[api]}/users?group-membership=implicit&groups=${g}&detail=ref&per-page=250"
      let n=0;
      while [[ -n ${next} ]]; do
        printf -v N "%03d" $n
        fn=${G[cache]}/users.${g}.${N};
        log "${http} '${next}' > ${fn}.xml"
        [[ -f ${fn}.xml ]] || ${http} "${next}" > ${fn}.xml;
        log next=$(${selT} -t -v '//api:page[@position="next"]/@href' ${fn}.xml)
        next=$(${selT} -t -v '//api:page[@position="next"]/@href' ${fn}.xml);
        let n+=1;
      done
    done
  fi;

  # Now loop through all users
  while [[ -n $1 ]]; do
    local username="$1@ucdavis.edu"
    next="${G[api]}/users?username=${username}&detail=full"
    let n=0;
    while [[ -n ${next} ]]; do
      printf -v N "%03d" $n
      fn=${G[cache]}/users.${username}.${N};
      log "${http} '${next}' > ${fn}.xml"
      [[ -f ${fn}.xml ]] || ${http} ${next} > ${fn}.xml
      xml2jsonld --type=user ${fn}.xml
      load_jsonld ${fn}.jsonld
      log next=$(${selT} -t -v '//api:page[@position="next"]/@href' ${fn}.xml)
      next=$(${selT} -t -v '//api:page[@position="next"]/@href' ${fn}.xml);
      let n+=1;
    done

    # Get the user relationships, These never get added to the linked database,
    # they are just used to get the required relationships.
    for uf in ${G[cache]}/users.${username}.*.xml; do
      # Break into users for each relationship
      for id in $($selT -t -v '/a:feed/a:entry/api:object/@id' $uf); do
        next="${G[api]}/relationships?involving=user($id)&detail=ref&per-page=250"
        let n=0;
        while [[ -n ${next} ]]; do
          printf -v N "%03d" $n
          fn=${G[cache]}/user-relationships.${username}.${id}.${N};
          log "${http} ${next} > ${fn}"
          [[ -f ${fn}.xml ]] || ${http} "${next}" > ${fn}.xml;
         # xml2jsonld --type=user-relationship ${fn}.xml
         # load_jsonld ${fn}.jsonld
          next=$(${selT} -t -v '//api:page[@position="next"]/@href' ${fn}.xml);
          let n+=1;
        done
      done
    done

    # From the user-relationships, get the relationship itself.
    for fn in ${G[cache]}/user-relationships.${username}.*.xml; do
      local tfn=${fn//user-relationships/relationships}
      tfn=${tfn%.xml}
      ids=$($selT -t -v /a:feed/a:entry/api:relationship/@id ${fn} | paste -sd ',' )
      if [[ -n $ids ]] ; then
        log ${http} "${G[api]}/relationships?ids=${ids}&detail=ref&per-page=250" '>' ${tfn}.xml
        [[ -f ${tfn}.xml ]] || ${http} "${G[api]}/relationships?ids=${ids}&detail=ref&per-page=250" > ${tfn}.xml
        xml2jsonld --type=relationship ${tfn}.xml
        load_jsonld ${tfn}.jsonld
      fi
    done

    if [[ -n ${G[user_pubs]} ]] ; then
      # Finally, publications
      for fn in ${G[cache]}/user-relationships.${username}.*.xml; do
        local tfn=${fn//user-relationships/publications}
        tfn=${tfn%.xml}
        ids=$($selT -t -v "/a:feed/a:entry/api:relationship/api:related[@category='publication' and @direction='from']/@id" ${fn} | paste -sd ',' )
        if [[ -n $ids ]] ; then
          next="${G[api]}/publications?ids=${ids}&detail=full"
          let n=0;
          while [[ -n ${next} ]]; do
            printf -v N "%03d" $n
            ttfn=${tfn}.${N};
            log "${http} '${next}' > ${ttfn}.xml"
            [[ -f ${ttfn}.xml ]] || ${http} ${next} > ${ttfn}.xml
            xml2jsonld --type=publication ${ttfn}.xml
            load_jsonld ${ttfn}.jsonld
            log next=$(${selT} -t -v '//api:page[@position="next"]/@href' ${ttfn}.xml)
            next=$(${selT} -t -v '//api:page[@position="next"]/@href' ${ttfn}.xml);
            let n+=1;
          done
        fi
      done
    fi
    shift
  done
}

:<<=cut

: <<='cut'
=pod

=head1 DEPENDANCIES

Elements uses a number of external bash commands. These must be installed for
the elements script to work. These commands include httpie, xmlstarlet, and

=over 4

=item L<httpie|https://httpie.org/>

httpie is a command-line tool similar to B<curl>. Since we only really need the
authentication, it may be better to use curl here and the .netrc file instead.
It is nice to have the httpie interface however, for debugging.

=item L<xmlstarlet|http://xmlstar.sourceforge.net/>

xmlstarlet is a simplfied method to perform xslt transforms to XML documents on
the command-line.  The syntax is more concise the the XSLT transforms.

=item L<xmllint>

xmllint is simply used to format the output from elements, and verify that it's
okay. Since we are often looking at the intermediate files, it's nice to have
them formatted.

=item L<getopt>

${FLAGS_GETOPT_CMD:-getopt}

=back

=head1 AUTHOR

Quinn Hart <qjhart@ucdavis.edu>

=cut


#MAIN
# global Variables
declare -A G=(
  [api_endpoint]=''
  [api_auth]=''
  [noop]=''
  [http_ssl]="tls1.2"
  [http_print]="b"
  [http_session]="elements"
  [cache]="/var/lib/harvest/elements"
  [util_rsync]="rsync"
  [util_xml2json]="xml2json"
  [util_xmlstarlet]="xmlstarlet"
  [util_http]="http"
#  [tdb]='/var/lib/harvest/experts'
  [graph]='http://experts.ucdavis.edu/oap/'
);

OPTS=();
while true; do
	case $1 in
	  -*) OPTS+=($1); shift ;;
	  -- ) shift; break;;
	  *) break;
	esac
done

# Allow getopt to be somewhere else
GETOPT=${FLAGS_GETOPT_CMD:-getopt}

init "${OPTS[@]}"
main.cmd "$@"

exit 0;
